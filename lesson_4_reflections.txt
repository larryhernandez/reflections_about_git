Q: When would you want to use a remote repository rather than keeping all your work local?

A: Remote repositories are useful for collaborating with other people who 
have cloned copies of the repository to their computers. This is 
particularly useful for open source projects that could include tens or 
hundreds of people working on various aspects of a large project. Remote 
repositories are also useful for an individual who is working on a project 
using multiple computers.

Q: Why might you want to always pull changes manually rather than having 
Git automatically stay up-to-date with your remote repository?

A: Having Git automatically stay up-to-date with the remote repository can
introduce unwanted changes in a local branch which has been created to 
experiment with a new feature or generally interfere with the functionality 
of a local branch. Manually updating repositories gives the owner of the 
local repository full control of which changes to incorporate. Also, 
automatic updates may not be completely possible anyway since it's common 
for two branches to introduce changes to the same section of code within 
the master branch, creating "merge conflicts" which would require 
resolution to be performed manually.

Q: Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

A: A clone is a copy of a repository that is performed using revision control software 
so that changes are automatically tracked. A clone is performed when joining a project
for the first time from a specific computer. For instance, to collaborate on a project
while working from a computer at the office one would create a clone. If working from
another computer is allowed, such as a company-provided laptop, then the repository
could be cloned to that laptop as well.


A branch is a special kind of copy of an existing repository that is already under 
revision-control. Branches are generated to test new features or make other changes to a 
repository so that the master (ie primary) version of that repository is not immediately 
affected by the changes made within the branch. Changes made to a branch can and should be 
pushed to the master branch, and at some point the branch could merge with the master 
branch. Several branches can exist and will all be managed by the revision control 
software. 

A fork is a special type of clone that is done on the GitHub website where the original
repository resides in one GitHub user's website and the cloned repoistory exists on another
person's GitHub website. This special type of clone operation automatically gives credit 
to the person whose GitHub branch is being forked. Forking also saves the new user of the 
repository from having to perform all the work that would be required when creating a new 
repository on GitHub.



Q: What is the benefit of having a copy of the last known state of the 
remote stored locally?


A: This allows a collaborator to work on the project offline while having
access to the most recent version of the remote's commit history. This
is helpful during flights in which a collaborator does not have internet
access.


Q: How would you collaborate without using Git or GitHub? What would be 
easier, and what would be harder?

A: Without GitHub I would have to arrange in-person meetings to review and
discuss acceptable changes. This would make life much more difficult 
because it requires scheduling common times and place for such a meeting.

I'm not sure that there would be any aspects to collaborating that would
be easier. I suppose not having to learn how to use Git / GitHub would be
easier in the short term, but in the long run the learning curve associated
with Git / GitHub is worth the investment.


